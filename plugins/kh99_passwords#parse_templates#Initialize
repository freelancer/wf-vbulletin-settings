if ($vbulletin->options['kh99_password_enabled'])
{
   if ((THIS_SCRIPT == 'profile' AND $_POST['do'] == 'updatepassword') OR
       (THIS_SCRIPT == 'register' AND $_POST['do'] == 'addmember'))
   {
      if ($vbulletin->options['kh99_password_serverchk'] || !$vbulletin->options['kh99_password_js'])
      {
         function kh99_checkpassword($password, &$rules, &$errors)
         {
            $kh99_password_len = (function_exists('mb_strlen') ? mb_strlen($password) : strlen($password));
            for ($i = 0; $i < $kh99_password_len; $i++)
            {
               $c = (function_exists('mb_substr') ? mb_substr($password, $i, 1) : substr($password, $i, 1));
               $kh99_password_ctypes['ucase'] += (ctype_upper($c) ? 1 : 0);
               $kh99_password_ctypes['digit'] += (ctype_digit($c) ? 1 : 0);
               $kh99_password_ctypes['other'] += (!(ctype_alpha($c) OR ctype_digit($c)) ? 1 : 0);
            }
            // NIST entropy calculation, except no dictionary check, and 
            // I modified the entropy for uppercase, digits, and other non-alphanumeric
            // to be 2 points each, instead of 6 for at least one of any of those. That 
            // might not technically make sense as a metric, but it follows the common 
            // policy of encouraging the use of non-lower case letters.
            $kh99_password_entropy = (min($kh99_password_len, 1) * 4.0) +
                                     (max(min($kh99_password_len - 1, 7), 0) * 2.0) +
                                     (max(min($kh99_password_len - 8, 13), 0) * 1.5) +
                                     (max($kh99_password_len - 21, 0) * 1.0) +
                                     ($kh99_password_ctypes['ucase'] ? 2.0 : 0) +
                                     ($kh99_password_ctypes['digit'] ? 2.0 : 0) +
                                     ($kh99_password_ctypes['other'] ? 2.0 : 0);
            $errors = array();

            foreach ($rules AS $id => $rule)
            {
               switch ($id)
               {
                  case 'length':
                     if ($kh99_password_len < $rule['num'])
                        $errors['length'] = 1;
                     break;
                  case 'ucase':
                     if ($kh99_password_ctypes['ucase'] < $rule['num'])
                        $errors['ucase'] = 1;
                     break;
                  case 'digit':
                     if ($kh99_password_ctypes['digit'] < $rule['num'])
                        $errors['digit'] = 1;
                     break;
                  case 'other':
                     if ($kh99_password_ctypes['other'] < $rule['num'])
                        $errors['other'] = 1;
                     break;
                  case 'score':
                     if ($kh99_password_entropy < $rule['num'])
                        $errors['score'] = 1;
                     break;
               }
            }
            return empty($errors);
         }
      }
   }
   
   function kh99_password_getpolicy($rules, $errors = NULL)
   {
      global $vbulletin, $vbphrase, $show;
      if ($vbulletin->options['kh99_password_policy_method'] == 0)
      {
         foreach ($rules AS $kh99_password_id => $kh99_password_rule)
         {
            if (is_array($errors))
               $kh99_password_rule['error'] = (isset($errors[$kh99_password_id]) ? $errors[$kh99_password_id] : 0);
            eval('$kh99_password_policy .= "' . fetch_template('kh99_password_rule') . '";');
         }
      }
      eval('$policy = "' . fetch_template('kh99_password_policy') . '";');
      return $policy;
   }

   if ((THIS_SCRIPT == 'profile' AND ($_REQUEST['do'] == 'editpassword' OR $_POST['do'] == 'updatepassword')) OR
       (THIS_SCRIPT == 'register' AND ($_REQUEST['do'] == 'register' OR $_POST['do'] == 'addmember')))
   {
      global $kh99_password_rules, $vbphrase;

      $kh99_password_rules = array();
      if ($vbulletin->options['kh99_password_policy_method'] == 0)
      {
         $kh99_password_charreq = array_map("intval", explode(',', $vbulletin->options['kh99_password_charreq']));

         if ($kh99_password_charreq[0] > 0)
             $kh99_password_rules['length'] = array('num' => $kh99_password_charreq[0], 'phrase' => construct_phrase($vbphrase['kh99_password_rule_length'], $kh99_password_charreq[0]));
         if ($kh99_password_charreq[1] > 0)
             $kh99_password_rules['ucase'] = array('num' => $kh99_password_charreq[1], 'phrase' => construct_phrase($vbphrase['kh99_password_rule_uc'], $kh99_password_charreq[1]));
         if ($kh99_password_charreq[2] > 0)
             $kh99_password_rules['digit'] = array('num' => $kh99_password_charreq[2], 'phrase' => construct_phrase($vbphrase['kh99_password_rule_digit'], $kh99_password_charreq[2]));
         if ($kh99_password_charreq[3] > 0)
             $kh99_password_rules['other'] = array('num' => $kh99_password_charreq[3], 'phrase' => construct_phrase($vbphrase['kh99_password_rule_other'], $kh99_password_charreq[3]));
          unset($kh99_password_charreq);
          $show['kh99_password_rulesmet'] = $vbulletin->options['kh99_password_js'] && (count($kh99_password_rules) > 0 ? 1 : 0);
      }
      else
      {
         if (intval($vbulletin->options['kh99_password_cutoff']) > 0)
             $kh99_password_rules['score'] = array('num' => intval($vbulletin->options['kh99_password_cutoff']));
          $show['kh99_password_bar'] = $vbulletin->options['kh99_password_js'] && $vbulletin->options['kh99_password_jsdisp'] && (count($kh99_password_rules) > 0 ? 1 : 0);
      }
      if ($vbulletin->options['kh99_password_js'])
      {
         $kh99_password_js_rules = '';
         $kh99_password_sep = '';
         foreach ($kh99_password_rules AS $kh99_password_id => $kh99_password_rule)
         {
             $kh99_password_js_rules .= $kh99_password_sep . "{id:'" . $kh99_password_id . "',num:" . $kh99_password_rule['num'] . '}';
             $kh99_password_sep = ',';
         }
         unset($kh99_password_id, $kh99_password_rule);

         global $vbphrase;
         $kh99_password_invalid_phrase = addcslashes($vbphrase['kh99_password_invalid'], '"\\');
         $kh99_password_mismatch_phrase = addcslashes(fetch_error('passwordmismatch'), '"\\');
         $vbulletin->templatecache['headinclude'] .= ' ' . $vbulletin->templatecache['kh99_password_headinc'];
      }
      if ($vbulletin->options['kh99_password_serverchk'] || !$vbulletin->options['kh99_password_js'])
         $show['nopasswordempty'] = 1;
      $show['kh99_password_jsdisp'] = ($vbulletin->options['kh99_password_js'] && $vbulletin->options['kh99_password_jsdisp']) ? 1 : 0;

  }
}